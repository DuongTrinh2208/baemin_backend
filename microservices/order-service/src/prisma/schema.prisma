generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  age      Int
  password String
  address  String?
  Order    Order[]
}

model Driver {
  id             Int              @id @default(autoincrement())
  email          String           @unique
  age            Int
  password       String
  DriverPayments DriverPayments[]
  Order          Order[]
}

model DriverPayments {
  id            Int      @id @default(autoincrement())
  driverId      Int
  orderId       Int
  paymentAmount Float
  paymentDate   DateTime @default(now())
  Driver        Driver   @relation(fields: [driverId], references: [id])
  Order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_order_id")
}

model Food {
  id          Int          @id @default(autoincrement())
  description String
  cost        Float
  storeId     Int
  category_id Int?
  category    category?    @relation(fields: [category_id], references: [id], onUpdate: NoAction)
  Store       Store        @relation(fields: [storeId], references: [id])
  OrderFoods  OrderFoods[]
}

model Order {
  id              Int               @id @default(autoincrement())
  store_id        Int?
  customer_id     Int?
  driver_id       Int?
  total           Float
  status          String?           @db.VarChar(50)
  orderdate       DateTime          @default(now()) @db.Timestamp(6)
  deliverydate    DateTime?         @db.Timestamp(6)
  DriverPayments  DriverPayments[]
  Customer        Customer?         @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Driver          Driver?           @relation(fields: [driver_id], references: [id], onUpdate: NoAction)
  Store           Store?            @relation(fields: [store_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  OrderFoods      OrderFoods[]
  OrderPromotions OrderPromotions[]
}

model OrderFoods {
  orderId  Int
  foodId   Int
  quantity Int
  Food     Food  @relation(fields: [foodId], references: [id])
  Order    Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_order_id")

  @@id([orderId, foodId])
}

model OrderPromotions {
  orderId     Int
  promotionId Int
  Promotion   Promotion @relation(fields: [promotionId], references: [id])
  Order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_order_id")

  @@id([orderId, promotionId])
}

model Promotion {
  id              Int               @id @default(autoincrement())
  description     String
  value           Int
  OrderPromotions OrderPromotions[]
}

model Store {
  id      Int     @id @default(autoincrement())
  email   String  @unique
  address String
  Food    Food[]
  Order   Order[]
}

model category {
  id        Int      @id @default(autoincrement())
  name      String
  is_remove Boolean? @default(false)
  Food      Food[]
}

enum OrderStatus {
  Preparing
  Delivering
  Delivered
  Cancel
}
