generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  age      Int
  password String
  address  String?
  orders   Order[]
}

model Driver {
  id       Int              @id @default(autoincrement())
  email    String           @unique
  age      Int
  password String
  payments DriverPayments[]
  orders   Order[]
}

model Store {
  id      Int     @id @default(autoincrement())
  email   String  @unique
  address String
  foods   Food[]
  orders  Order[]
}

model Food {
  id          Int          @id @default(autoincrement())
  description String
  cost        Float
  storeId     Int
  category_id Int?
  category    category?    @relation(fields: [category_id], references: [id], onUpdate: NoAction)
  store       Store        @relation(fields: [storeId], references: [id])
  orderFoods  OrderFoods[]
}

model Promotion {
  id              Int               @id @default(autoincrement())
  description     String
  value           Int
  orderPromotions OrderPromotions[]
}

model Order {
  id              Int               @id @default(autoincrement())
  total           Float
  status          OrderStatus
  orderDate       DateTime          @default(now())
  deliveryDate    DateTime?
  storeId         Int
  customerId      Int
  driverId        Int?
  driverPayments  DriverPayments[]
  customer        Customer          @relation(fields: [customerId], references: [id])
  driver          Driver?           @relation(fields: [driverId], references: [id])
  store           Store             @relation(fields: [storeId], references: [id])
  orderFoods      OrderFoods[]
  orderPromotions OrderPromotions[]
}

model OrderFoods {
  orderId  Int
  foodId   Int
  quantity Int
  food     Food  @relation(fields: [foodId], references: [id])
  order    Order @relation(fields: [orderId], references: [id])

  @@id([orderId, foodId])
}

model OrderPromotions {
  orderId     Int
  promotionId Int
  order       Order     @relation(fields: [orderId], references: [id])
  promotion   Promotion @relation(fields: [promotionId], references: [id])

  @@id([orderId, promotionId])
}

model DriverPayments {
  id            Int      @id @default(autoincrement())
  driverId      Int
  orderId       Int
  paymentAmount Float
  paymentDate   DateTime @default(now())
  driver        Driver   @relation(fields: [driverId], references: [id])
  order         Order    @relation(fields: [orderId], references: [id])
}

model category {
  id        Int      @id @default(autoincrement())
  name      String
  is_remove Boolean? @default(false)
  Food      Food[]
}

enum OrderStatus {
  Preparing
  Delivering
  Delivered
  Cancel
}
